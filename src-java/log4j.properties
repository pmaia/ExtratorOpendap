########## LOG CONFIGURATION FOR SEACHER ##########

## Defining SHICA Logger and Level. 
# The first parameter determines log4j Level. The most verbose Level is ALL (that actives all log levels), the current
# level sequence is: ALL - DEBUG - INFO - WARN - ERROR - FATAL - OFF
# The Second parameter determines the SHICA Logger. It means that all log event rising from any class in any package
# bellow shcore package will be "captured" by this logger.

#log4j.debug=true
#log4j.rootLogger = ALL, shcore


log4j.logger.br.edu.ufcg.lsd.seghidro.extratoropendap = WARN, stdout
#, fileout
#log4j.logger.ucar.nc2 = ALL, stdout, fileout


#### TXT LOGGER DEFINITIONS ####

# Defining an Appender for SHICA logger. An appender is responsable for writing log's events in some out-put (following we going to
# set that out-put). We use RollingFileAppender to make log backups. 
log4j.appender.fileout = org.apache.log4j.RollingFileAppender

# Here, you can define the file path-name where you want to write your log messages. If you don't set any
# file path-name here, will set this property with a default value defined when the logging application run. 
log4j.appender.fileout.file = logs/extrator_opendap.log

# Defining a layout to write log messages. Here, you ca define how the messages will be shown in your log out-put. The PatternLayout
# is a Layout defined by Log4j, and use pattern-codes to define a layout. The pattern-code that we use here will result in the following
# out-put example: 
# [2005/09/29 10:40:25:100] INFO    org.searcher.mygrid.main.Main.main ==> MyGrid was succesfully started!
log4j.appender.fileout.layout = org.apache.log4j.PatternLayout
log4j.appender.fileout.layout.conversionPattern = [%d{HH:mm:ss:SSS}] %-7p %c{2}.%M ==> %m%n
#log4j.appender.fileout.layout.conversionPattern = [%d{yyyy/MM/dd HH:mm:ss:SSS}] %-7p %c{2}.%M ==> %m%n
#                                                   Classe:Linha
##log4j.appender.fileout.layout.ConversionPattern=(%F:%L) %p %t %c - %m%n

# Determines if the new log messages will be appended to the end of the log file. If it is set `true`, new log messages will be appended,
# if it is set 'false', a new file will be created. 
log4j.appender.fileout.append = true

# It actives the Buffer Properties of Log4j. If this property is activated, the log messages that arrives in this appender will be stored
# in a buffer with a determined size. When this size is reached, the appender will write all messages buffered in one time. If this
# property is turn-off, will occur imediate-flush, i.e, when a new message arrives, it will be write immediately.
log4j.appender.fileout.BufferedIO = false

# You can define the buffer size used when the property BufferedIO is set as 'true'. The dafault value is 8192 (determined by log4j).
log4j.appender.fileout.BufferSize=4096

## Define the maximum log file size. If this size is reached, this file will be renamed and becomes a backup file, and a new log file will
# be created. 
log4j.appender.fileout.MaxFileSize=200KB

# When the log file reaches its maximum size, a backup file is created. This property defines
# how many backups will be created.  
log4j.appender.fileout.MaxBackupIndex=5

# Appender para o console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
# O padrão para apresentação do conteúdo (layout)  
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n  